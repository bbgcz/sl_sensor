<launch>

<arg name="open_dashboard" doc="Whether to open rqt scanning dashboard" default="true" />

<arg name="save_point_cloud" doc="Save point clouds" default="false" />
<arg name="save_images" doc="Save images" default="false" />
<arg name="save_header" doc="Header appended to start of saved files" default="log" />

<arg name="primary_camera_parameters_filename" doc="camera parameter xml file" default="$(find sl_sensor_calibration)/calibration_files/primary_camera/primary_camera.xml" />
<arg name="secondary_camera_parameters_filename" doc="camera parameter xml file" default="$(find sl_sensor_calibration)/calibration_files/secondary_camera/secondary_camera.xml" />
<arg name="projector_parameters_filename" doc="camera parameter xml file" default="$(find sl_sensor_calibration)/calibration_files/projector/projector.xml" />
<arg name="primary_camera_name" doc="Name of camera as declared in in versavis, used for triangulation" default="cam2"/>
<arg name="secondary_camera_name" doc="Name of camera as declared in in versavis, that will be used for colour shading" default="cam1"/>
<arg name="projector_pattern_name" doc="Name of pattern sequence to project" default="psp_tpu_vertical" />
<arg name="decoder_name" doc="Name of decoder" default="phase_shift_with_tpu" />
<arg name="pattern_direction" doc="Pattern direction (vertical/horizontal/both)" default="vertical" />
<arg name="colour_image_index"  doc="Index of the pattern sequence where the scene is fully illuminated" default="1" />

<arg name="projector_yaml_directory" doc="projector_yaml_directory" default="$(find sl_sensor_projector)/projector_yaml/lightcrafter4500.yaml" />
<arg name="frame_id" doc="frame_id used for headers in the published messages" default="sl_sensor"/>

<node pkg="tf" type="static_transform_publisher" name="map_to_sl_sensor"  args="0 0 0 0 0 0 1 map $(arg frame_id) 10" />

<!-- Projector Node -->
<include file="$(find sl_sensor_projector)/launch/lightcrafter_4500_projector.launch" />

<!-- Initialise Reconstruction Nodelet Pipeline -->
<node pkg="nodelet" type="nodelet" name="standalone_nodelet"  args="manager" output="screen">
  <param name="num_worker_threads" value="10" />
</node>

<!-- Image Synchroniser -->
<include file="$(find sl_sensor_image_acquisition)/launch/image_synchroniser.launch" pass_all_args="true">
  <arg name="image_topics" value="/versavis/$(arg primary_camera_name)/image_raw /versavis/$(arg secondary_camera_name)/image_raw" />
  <arg name="fixed_pattern_name" value="$(arg projector_pattern_name)" />
</include>

<!-- Decoder -->
<node pkg="nodelet" type="nodelet" name="decoder" args="load sl_sensor_codec/DecoderNodelet standalone_nodelet" output="screen">
  <rosparam command="load" file="$(find sl_sensor_codec)/param/default_parameters.yaml" />
  <param name="codec_yaml_directory" type="string" value="$(find sl_sensor_codec)/codec_yaml/codec_config.yaml" /> 
  <param name="projector_yaml_directory" type="string" value="$(arg projector_yaml_directory)" /> 
  <param name="direction" type="string" value="$(arg pattern_direction)" />
  <param name="decoder_name" type="string" value="$(arg decoder_name)" />
  
  <param name="colour_shading_enabled" type="bool" value="true" />
  <param name="colour_camera_index" type="int" value="1" />
  <param name="colour_image_index" type="int" value="$(arg colour_image_index)" />
</node>		  

<!-- Triangulator -->
<node pkg="nodelet" type="nodelet" name="triangulator" args="load sl_sensor_reconstruction/TriangulatorNodelet standalone_nodelet" output="screen">
  <rosparam command="load" file="$(find sl_sensor_reconstruction)/param/default_parameters.yaml" />
  <param name="primary_camera_parameters_filename" type="string" value="$(arg primary_camera_parameters_filename)" />
  <param name="projector_parameters_filename" type="string" value="$(arg projector_parameters_filename)" />

  <param name="colour_shading_enabled" type="bool" value="true" />
  <param name="secondary_camera_parameters_filename" type="string" value="$(arg secondary_camera_parameters_filename)" />  
</node>		  

<!-- Loggers -->
<include file="$(find sl_sensor_logger)/launch/launch_loggers.launch" pass_all_args="true"/>

<!-- RQT Scanning Dashboard if desired-->
<group if="$(arg open_dashboard)">
  <include file="$(find sl_sensor)/launch/display_point_cloud_rviz.launch">
    <arg name="is_colour_point_cloud" value="true"/>
  </include>
  <include file="$(find sl_sensor_rqt_guis_common)/launch/run_rqt_scanning_dashboard.launch" />
</group>

</launch>